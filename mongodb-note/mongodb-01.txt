
mongodb://100.65.34.33:27017/?gssapiServiceName=mongodb

mongodb://100.65.34.33:27017/graylog?replicaSet=rs0 \

"mongodb://graylog:123456@mongodb-0.mongodb-headless.graylog.svc.cluster.local:27017,mongodb-1.mongodb-headless.graylog.svc.cluster.local:27017/graylog?replicaSet=rs0"



mongodb://100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017/graylog?replicaSet=rs0


mongo --host "mongodb://100.65.34.28:27017,mongodb://100.65.34.33:27017,mongodb://100.65.34.34:27017/?gssapiServiceName=mongodb"

    mongo admin --host "mongodb-0.mongodb-headless.graylog.svc.cluster.local,mongodb-1.mongodb-headless.graylog.svc.cluster.local," --authenticationDatabase admin -u root -p 




 kubectl run --namespace graylog mongodb-client --rm --tty -i --restart='Never' --image 100.65.34.29:8082/bitnami/mongodb:4.4.1-debian-10-r39 --command -- bash

mongo admin --host "mongodb-0.mongodb-headless.graylog.svc.cluster.local,mongodb-1.mongodb-headless.graylog.svc.cluster.local," --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD
mongo admin --host "100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD

# mongo mongodb://100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017/
# mongo --host "100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017"


cfg={ _id:"rs0",members:[{_id:0,host:'100.65.34.28:27017',priority:1},{_id:1,host:'100.65.34.33:27017',priority:1},{_id:2,host:'100.65.34.34:27017',arbiterOnly:true}] };
rs.initiate(cfg)

echo "config = {_id:'osmongodb',members: [{_id: 0, host: '100.65.34.28:27017'},{_id: 1, host:'100.65.34.33:27017'},{_id: 2, host:'100.65.34.34:27017'}]} 

cfg={_id:'osmongodb',members: [{_id: 0, host: '100.65.34.28:27017'},{_id: 1, host:'100.65.34.33:27017'},{_id: 2, host:'100.65.34.34:27017'}]} 

cfg={_id:'rs0',members: [{_id: 0, host: '100.65.34.28:27017'},{_id: 1, host:'100.65.34.33:27017'},{_id: 2, host:'100.65.34.34:27017'}]}



mongodb://100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017/?replicaSet=osmongodb
mongo admin --host "100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017" --authenticationDatabase admin -u admin -p admin123

I have no name!@mongodb-client:/$ mongo admin --host "100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017" --authenticationDatabase admin -u admin -p admin123
MongoDB shell version v4.4.1
connecting to: mongodb://100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017/admin?authSource=admin&compressors=disabled&gssapiServiceName=mongodb

mongo graylog --host "100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017" --authenticationDatabase graylog -u graylog -p graylog123

"mongodb://graylog:graylog123@100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017/graylog?replicaSet=osmongodb"
"mongodb://admin:admin123@100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017/admin?replicaSet=osmongodb"


J6svl9a3Er
    mongo admin --host "mongodb-0.mongodb-headless.graylog.svc.cluster.local,mongodb-1.mongodb-headless.graylog.svc.cluster.local," --authenticationDatabase admin -u root -p 



use admin
admin.createUser(
      {
        user: "",
        pwd: "7ujm<KI*",
        roles: [ { role: "root", db: "admin" } ]
      }
)"



rs0:PRIMARY> use graylog
switched to db graylog
rs0:PRIMARY> show users;
{
	"_id" : "graylog.graylog",
	"userId" : UUID("8e16dd26-c30f-4c00-88af-6a31e6c43e95"),
	"user" : "graylog",
	"db" : "graylog",
	"roles" : [
		{
			"role" : "readWrite",
			"db" : "graylog"
		}
	],
	"mechanisms" : [
		"SCRAM-SHA-1",
		"SCRAM-SHA-256"
	]
}



use admin
db.createUser(
  {
    user: "admin",
    pwd: "admin123",
    roles: [ { role: "root", db: "admin" }]

  }
)



use admin

db.createUser(
  {
    user: "apps",
    pwd: "7ujm<KI*",
    roles: [ { role: "readWriteAnyDatabase", db: "admin" }]
  }
)


osmongodb:PRIMARY> use graylog
switched to db graylog
osmongodb:PRIMARY> db
graylog

use admin
db.createUser(
  {
    user: "graylog",
    pwd: "graylog123",
    roles: [ { role: "readWriteAnyDatabase", db: "graylog" }]
  }
)


use graylog
db.createUser(
  {
    user: "graylog",
    pwd: "graylog123",
    roles: [ { role: "readWrite", db: "graylog" }]
	mechanisms: [ "SCRAM-SHA-1", "SCRAM-SHA-256"	]
  }
)


创建账号：


use graylog
db.createUser(
  {
    user: "graylog",
    pwd: "graylog123",
    roles: [
       { role: "readWrite", db: "graylog" }
    ]
  }
)

删除账号：

osmongodb:PRIMARY> use graylog
osmongodb:PRIMARY> show users
{
	"_id" : "graylog.graylog",
	"userId" : UUID("a6dccba2-5ba5-42a2-9d1a-55f446e18419"),
	"user" : "graylog",
	"db" : "graylog",
	"roles" : [
		{
			"role" : "dbAdmin",
			"db" : "graylog"
		}
	]
}
osmongodb:PRIMARY> db.dropUser("graylog")


db.graylog.insert({"name":"graylog"})


db.dropUser("graylog")
use graylog
db.createUser(
  {
    user: "graylog",
    pwd: "graylog123",
    roles: [ { role: "readWrite", db: "graylog" }],
	mechanisms: [  "SCRAM-SHA-256" ]
  }
)

db.dropUser("graylog")
use graylog
db.createUser(
   {
    user: "graylog",
    pwd: "graylog123",
    roles: [ { role: "readWrite", db: "graylog" }]
   }
)


use graylog
db.grantRolesToUser(
    "graylog",
    [
      { role: "dbAdmin", db: "graylog" }
    ]
 )


MongoDB 目前内置了 7 个角色。

数据库用户角色：read、readWrite;
数据库管理角色：dbAdmin、dbOwner、userAdmin；
集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；
备份恢复角色：backup、restore；
所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase
超级用户角色：root；这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）
内部角色：__system
这些角色对应的作用如下：

Read：允许用户读取指定数据库
readWrite：允许用户读写指定数据库
dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile
userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户
clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。
readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限
readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限
userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限
dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。
root：只在admin数据库中可用。超级账号，超级权限

helm install --namespace "graylog2" graylog2 ./graylog \
  --set tags.install-mongodb=false\
  --set tags.install-elasticsearch=false\
  --set graylog.mongodb.uri=mongodb://graylog:graylog123@100.65.34.28:27017,100.65.34.33:27017,100.65.34.34:27017/graylog?replicaSet=osmongodb \
  --set graylog.elasticsearch.hosts=http://100.65.34.28:9200 \
  --set graylog.elasticsearch.version=7



mongo "mongodb://admin:admin123@100.65.34.189:30370/admin?replicaSet=osmongodb"

  elasticsearch.yml: |-
    cluster.name: elasticsearch

    node.data: ${NODE_DATA:true}
    node.master: ${NODE_MASTER:true}
    node.ingest: ${NODE_INGEST:true}
    node.name: ${HOSTNAME}
    network.host: 0.0.0.0
    # see https://github.com/kubernetes/kubernetes/issues/3595
    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}

    discovery:
      zen:
        ping.unicast.hosts: ${DISCOVERY_SERVICE:}
        minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}

    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679
    processors: ${PROCESSORS:}

    # avoid split-brain w/ a minimum consensus of two masters plus a data node
    gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}
    gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}
    gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}
    gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}
    gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}
  log4j2.properties: |-
    status = error
    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n
    rootLogger.level = info
    rootLogger.appenderRef.console.ref = console
    logger.searchguard.name = com.floragunn
    logger.searchguard.level = info



rsconf={_id: "rs0",members: [{_id: 0,  host: "100.65.34.28:27117},{_id: 1,host: "100.65.34.28:27118"},{_id: 2,host: "100.65.34.28:27119"}]}